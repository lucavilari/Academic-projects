{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOUtmyU3Zp6voOa2LCvVThX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":51,"metadata":{"id":"KEri4VdqhQD4","executionInfo":{"status":"ok","timestamp":1697681714519,"user_tz":300,"elapsed":269,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","from scipy import stats\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["from google.colab import files\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wQ8wTqEXlqtG","executionInfo":{"status":"ok","timestamp":1697681716241,"user_tz":300,"elapsed":1455,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"e9ba3c6a-c6ae-41e9-fccc-ddd58515e985"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/Quipux/data.txt\")\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"mofg5pVnlx6z","executionInfo":{"status":"ok","timestamp":1697681716241,"user_tz":300,"elapsed":8,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"95c1ca5f-7537-4bb5-84bd-8069ae560c29"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   No  year  month  day  hour  pm2.5  DEWP  TEMP    PRES cbwd    Iws  Is  Ir\n","0   1  2010      1    1     0    NaN   -21 -11.0  1021.0   NW   1.79   0   0\n","1   2  2010      1    1     1    NaN   -21 -12.0  1020.0   NW   4.92   0   0\n","2   3  2010      1    1     2    NaN   -21 -11.0  1019.0   NW   6.71   0   0\n","3   4  2010      1    1     3    NaN   -21 -14.0  1019.0   NW   9.84   0   0\n","4   5  2010      1    1     4    NaN   -20 -12.0  1018.0   NW  12.97   0   0"],"text/html":["\n","  <div id=\"df-0631362f-51c5-497c-a5a3-0f4f38f9418b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>No</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","      <th>hour</th>\n","      <th>pm2.5</th>\n","      <th>DEWP</th>\n","      <th>TEMP</th>\n","      <th>PRES</th>\n","      <th>cbwd</th>\n","      <th>Iws</th>\n","      <th>Is</th>\n","      <th>Ir</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>-21</td>\n","      <td>-11.0</td>\n","      <td>1021.0</td>\n","      <td>NW</td>\n","      <td>1.79</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>2010</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>-21</td>\n","      <td>-12.0</td>\n","      <td>1020.0</td>\n","      <td>NW</td>\n","      <td>4.92</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>2010</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>-21</td>\n","      <td>-11.0</td>\n","      <td>1019.0</td>\n","      <td>NW</td>\n","      <td>6.71</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2010</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>-21</td>\n","      <td>-14.0</td>\n","      <td>1019.0</td>\n","      <td>NW</td>\n","      <td>9.84</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>2010</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>-20</td>\n","      <td>-12.0</td>\n","      <td>1018.0</td>\n","      <td>NW</td>\n","      <td>12.97</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0631362f-51c5-497c-a5a3-0f4f38f9418b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0631362f-51c5-497c-a5a3-0f4f38f9418b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0631362f-51c5-497c-a5a3-0f4f38f9418b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9ea70b86-5003-4157-a0c0-e79391903268\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ea70b86-5003-4157-a0c0-e79391903268')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9ea70b86-5003-4157-a0c0-e79391903268 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["df.info"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_lBcdXLCmfNS","executionInfo":{"status":"ok","timestamp":1697681716530,"user_tz":300,"elapsed":296,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"cc707602-6012-4a3d-95cf-f286100d42cb"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method DataFrame.info of           No  year  month  day  hour  pm2.5  DEWP  TEMP    PRES cbwd     Iws  \\\n","0          1  2010      1    1     0    NaN   -21 -11.0  1021.0   NW    1.79   \n","1          2  2010      1    1     1    NaN   -21 -12.0  1020.0   NW    4.92   \n","2          3  2010      1    1     2    NaN   -21 -11.0  1019.0   NW    6.71   \n","3          4  2010      1    1     3    NaN   -21 -14.0  1019.0   NW    9.84   \n","4          5  2010      1    1     4    NaN   -20 -12.0  1018.0   NW   12.97   \n","...      ...   ...    ...  ...   ...    ...   ...   ...     ...  ...     ...   \n","43819  43820  2014     12   31    19    8.0   -23  -2.0  1034.0   NW  231.97   \n","43820  43821  2014     12   31    20   10.0   -22  -3.0  1034.0   NW  237.78   \n","43821  43822  2014     12   31    21   10.0   -22  -3.0  1034.0   NW  242.70   \n","43822  43823  2014     12   31    22    8.0   -22  -4.0  1034.0   NW  246.72   \n","43823  43824  2014     12   31    23   12.0   -21  -3.0  1034.0   NW  249.85   \n","\n","       Is  Ir  \n","0       0   0  \n","1       0   0  \n","2       0   0  \n","3       0   0  \n","4       0   0  \n","...    ..  ..  \n","43819   0   0  \n","43820   0   0  \n","43821   0   0  \n","43822   0   0  \n","43823   0   0  \n","\n","[43824 rows x 13 columns]>"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"KVccqlt7mi31","executionInfo":{"status":"ok","timestamp":1697681716530,"user_tz":300,"elapsed":14,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"bc5b9a9d-99a7-4c75-a621-2914dcbb0d65"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 No          year         month           day          hour  \\\n","count  43824.000000  43824.000000  43824.000000  43824.000000  43824.000000   \n","mean   21912.500000   2012.000000      6.523549     15.727820     11.500000   \n","std    12651.043435      1.413842      3.448572      8.799425      6.922266   \n","min        1.000000   2010.000000      1.000000      1.000000      0.000000   \n","25%    10956.750000   2011.000000      4.000000      8.000000      5.750000   \n","50%    21912.500000   2012.000000      7.000000     16.000000     11.500000   \n","75%    32868.250000   2013.000000     10.000000     23.000000     17.250000   \n","max    43824.000000   2014.000000     12.000000     31.000000     23.000000   \n","\n","              pm2.5          DEWP          TEMP          PRES           Iws  \\\n","count  41757.000000  43824.000000  43824.000000  43824.000000  43824.000000   \n","mean      98.613215      1.817246     12.448521   1016.447654     23.889140   \n","std       92.050387     14.433440     12.198613     10.268698     50.010635   \n","min        0.000000    -40.000000    -19.000000    991.000000      0.450000   \n","25%       29.000000    -10.000000      2.000000   1008.000000      1.790000   \n","50%       72.000000      2.000000     14.000000   1016.000000      5.370000   \n","75%      137.000000     15.000000     23.000000   1025.000000     21.910000   \n","max      994.000000     28.000000     42.000000   1046.000000    585.600000   \n","\n","                 Is            Ir  \n","count  43824.000000  43824.000000  \n","mean       0.052734      0.194916  \n","std        0.760375      1.415867  \n","min        0.000000      0.000000  \n","25%        0.000000      0.000000  \n","50%        0.000000      0.000000  \n","75%        0.000000      0.000000  \n","max       27.000000     36.000000  "],"text/html":["\n","  <div id=\"df-1acc8abb-dc50-47c1-bde3-2c038af03c7d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>No</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","      <th>hour</th>\n","      <th>pm2.5</th>\n","      <th>DEWP</th>\n","      <th>TEMP</th>\n","      <th>PRES</th>\n","      <th>Iws</th>\n","      <th>Is</th>\n","      <th>Ir</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>41757.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","      <td>43824.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>21912.500000</td>\n","      <td>2012.000000</td>\n","      <td>6.523549</td>\n","      <td>15.727820</td>\n","      <td>11.500000</td>\n","      <td>98.613215</td>\n","      <td>1.817246</td>\n","      <td>12.448521</td>\n","      <td>1016.447654</td>\n","      <td>23.889140</td>\n","      <td>0.052734</td>\n","      <td>0.194916</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>12651.043435</td>\n","      <td>1.413842</td>\n","      <td>3.448572</td>\n","      <td>8.799425</td>\n","      <td>6.922266</td>\n","      <td>92.050387</td>\n","      <td>14.433440</td>\n","      <td>12.198613</td>\n","      <td>10.268698</td>\n","      <td>50.010635</td>\n","      <td>0.760375</td>\n","      <td>1.415867</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>2010.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-40.000000</td>\n","      <td>-19.000000</td>\n","      <td>991.000000</td>\n","      <td>0.450000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>10956.750000</td>\n","      <td>2011.000000</td>\n","      <td>4.000000</td>\n","      <td>8.000000</td>\n","      <td>5.750000</td>\n","      <td>29.000000</td>\n","      <td>-10.000000</td>\n","      <td>2.000000</td>\n","      <td>1008.000000</td>\n","      <td>1.790000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>21912.500000</td>\n","      <td>2012.000000</td>\n","      <td>7.000000</td>\n","      <td>16.000000</td>\n","      <td>11.500000</td>\n","      <td>72.000000</td>\n","      <td>2.000000</td>\n","      <td>14.000000</td>\n","      <td>1016.000000</td>\n","      <td>5.370000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>32868.250000</td>\n","      <td>2013.000000</td>\n","      <td>10.000000</td>\n","      <td>23.000000</td>\n","      <td>17.250000</td>\n","      <td>137.000000</td>\n","      <td>15.000000</td>\n","      <td>23.000000</td>\n","      <td>1025.000000</td>\n","      <td>21.910000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>43824.000000</td>\n","      <td>2014.000000</td>\n","      <td>12.000000</td>\n","      <td>31.000000</td>\n","      <td>23.000000</td>\n","      <td>994.000000</td>\n","      <td>28.000000</td>\n","      <td>42.000000</td>\n","      <td>1046.000000</td>\n","      <td>585.600000</td>\n","      <td>27.000000</td>\n","      <td>36.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1acc8abb-dc50-47c1-bde3-2c038af03c7d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1acc8abb-dc50-47c1-bde3-2c038af03c7d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1acc8abb-dc50-47c1-bde3-2c038af03c7d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c9ce92ff-03c1-413b-b88d-950daf72daed\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9ce92ff-03c1-413b-b88d-950daf72daed')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c9ce92ff-03c1-413b-b88d-950daf72daed button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["columnas = df.columns\n","print(columnas)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PD0u7MKFpD-q","executionInfo":{"status":"ok","timestamp":1697681716530,"user_tz":300,"elapsed":13,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"ab667744-1ab3-4c67-8844-dfb295c42474"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['No', 'year', 'month', 'day', 'hour', 'pm2.5', 'DEWP', 'TEMP', 'PRES',\n","       'cbwd', 'Iws', 'Is', 'Ir'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["#Encotnrando la correlación entre las variables\n","\n","#Matriz de correlación de las variables de interés con \"ciencia_expectativas\", para encontrar las que serán más predictivas para dicha variable\n","\n","variables_de_interes = [\n","    'year', 'month', 'day', 'hour', 'pm2.5', 'DEWP', 'TEMP', 'PRES',\n","       'cbwd', 'Iws', 'Is', 'Ir'\n","]\n","# eliminar los registros na\n","df_interes = df[variables_de_interes].dropna()\n","\n","# Calcular la matriz de correlación entre las variables de interés y 'pm2.5' y ordernaras de mayor a menor\n","matriz_correlacion = df_interes.corrwith(df['pm2.5']).sort_values(ascending=False)\n","\n","# Mostrar la matriz de correlación\n","print(matriz_correlacion)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UvUyB2cRo-AA","executionInfo":{"status":"ok","timestamp":1697681716530,"user_tz":300,"elapsed":11,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"7107ecd7-ef55-4f94-9df2-8cf2404020aa"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["pm2.5    1.000000\n","DEWP     0.171423\n","day      0.082788\n","Is       0.019266\n","year    -0.014690\n","hour    -0.023116\n","month   -0.024069\n","PRES    -0.047282\n","Ir      -0.051369\n","TEMP    -0.090534\n","Iws     -0.247784\n","dtype: float64\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-57-c299ac374f8f>:13: FutureWarning: The default value of numeric_only in DataFrame.corrwith is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  matriz_correlacion = df_interes.corrwith(df['pm2.5']).sort_values(ascending=False)\n"]}]},{"cell_type":"code","source":["df_1= df.dropna()"],"metadata":{"id":"cTpK3YybrVtf","executionInfo":{"status":"ok","timestamp":1697681716531,"user_tz":300,"elapsed":9,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["# Dividir el conjunto de datos en características (X) y etiquetas (y)\n","X = df_1[['year', 'month', 'day', 'hour', 'DEWP', 'TEMP', 'PRES', 'cbwd', 'Iws', 'Is', 'Ir']]\n","y = df_1['pm2.5']"],"metadata":{"id":"hV3MHY4_qxio","executionInfo":{"status":"ok","timestamp":1697681716531,"user_tz":300,"elapsed":9,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["# Codificar variables categóricas (por ejemplo, 'cbwd') usando one-hot encoding\n","X = pd.get_dummies(X, columns=['cbwd'])"],"metadata":{"id":"4ftAqjcAq7Cb","executionInfo":{"status":"ok","timestamp":1697681716531,"user_tz":300,"elapsed":9,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["# Dividir el conjunto de datos en entrenamiento y prueba\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"V9iHYdXAq8iW","executionInfo":{"status":"ok","timestamp":1697681716531,"user_tz":300,"elapsed":9,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["# Entrenar un modelo de regresión lineal\n","model = LinearRegression()\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"1EliMz1Fq_2Z","executionInfo":{"status":"ok","timestamp":1697681716758,"user_tz":300,"elapsed":235,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"6b3cf346-b313-4b22-b03a-00332ba9bd08"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de prueba\n","y_pred = model.predict(X_test)"],"metadata":{"id":"F75rxe8mreXF","executionInfo":{"status":"ok","timestamp":1697681716758,"user_tz":300,"elapsed":5,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["# Evaluar el modelo\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(f'Mean Squared Error: {mse}')\n","print(f'R-squared (R2) Score: {r2}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QeV50zEPrjBJ","executionInfo":{"status":"ok","timestamp":1697681716758,"user_tz":300,"elapsed":4,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"b0873a4b-e5c3-484a-e874-4942feccc61c"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error: 6431.483078951879\n","R-squared (R2) Score: 0.27010473552852854\n"]}]},{"cell_type":"code","source":["# Visualizar las predicciones\n","plt.scatter(y_test, y_pred)\n","plt.xlabel(\"Valores reales\")\n","plt.ylabel(\"Predicciones\")\n","plt.title(\"Predicciones vs Valores reales\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"vheDvj9HroDW","executionInfo":{"status":"ok","timestamp":1697681717124,"user_tz":300,"elapsed":369,"user":{"displayName":"Luis Carlos Ávila","userId":"14917173902792909124"}},"outputId":"4075917b-8a64-43a1-a24f-fe6635028749"},"execution_count":65,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"MRcrF8tznAiA"}}]}